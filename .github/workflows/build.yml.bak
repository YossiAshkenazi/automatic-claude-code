name: Build & Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/dual-agent-monitor

jobs:
  # Build and test
  build:
    name: Build Application
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd dual-agent-monitor
        npm ci

    - name: Run tests
      run: |
        cd dual-agent-monitor
        npm run test:unit

    - name: Build application
      run: |
        cd dual-agent-monitor
        npm run build:validate

    - name: Generate version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=${GITHUB_SHA::8}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create build info
      run: |
        cd dual-agent-monitor
        cat > dist/build-info.json << EOF
        {
          "version": "${{ steps.version.outputs.version }}",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "buildTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "buildNumber": "${{ github.run_number }}"
        }
        EOF

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ steps.version.outputs.version }}
        path: dual-agent-monitor/dist/
        retention-days: 30

  # Docker build and push
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-${{ needs.build.outputs.version }}
        path: dual-agent-monitor/dist/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: dual-agent-monitor
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ needs.build.outputs.version }}
          BUILD_TIME=${{ fromJSON(steps.meta.outputs.json).created }}

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker]
    environment:
      name: staging
      url: https://staging.dual-agent-monitor.example.com
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying version ${{ needs.build.outputs.version }} to staging"
        # Add your deployment commands here
        # Example: kubectl, terraform, or API calls to your deployment platform
        
        # Placeholder for actual deployment
        echo "Deployment configuration:"
        echo "  Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "  Version: ${{ needs.build.outputs.version }}"
        echo "  Environment: staging"

    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging environment"
        # Add smoke tests here
        # Example: curl checks, basic API tests
        
        # Placeholder
        sleep 5
        echo "Smoke tests passed"

  # Deploy to production (manual approval required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker, deploy-staging]
    environment:
      name: production
      url: https://dual-agent-monitor.example.com
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying version ${{ needs.build.outputs.version }} to production"
        # Add your production deployment commands here
        
        # Placeholder for actual deployment
        echo "Production deployment configuration:"
        echo "  Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
        echo "  Version: ${{ needs.build.outputs.version }}"
        echo "  Environment: production"

    - name: Run production smoke tests
      run: |
        echo "Running smoke tests against production environment"
        # Add production smoke tests here
        
        # Placeholder
        sleep 10
        echo "Production smoke tests passed"

    - name: Create GitHub release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "dual-agent-monitor/dist/**"
        bodyFile: "CHANGELOG.md"
        token: ${{ secrets.GITHUB_TOKEN }}

  # Notify deployment status
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [build, docker, deploy-staging]
    if: always()

    steps:
    - name: Deployment success notification
      if: needs.deploy-staging.result == 'success'
      run: |
        echo "✅ Deployment successful"
        echo "Version: ${{ needs.build.outputs.version }}"
        echo "Environment: staging"
        # Add Slack, Discord, or email notifications here

    - name: Deployment failure notification
      if: needs.deploy-staging.result == 'failure'
      run: |
        echo "❌ Deployment failed"
        echo "Version: ${{ needs.build.outputs.version }}"
        echo "Please check the deployment logs"
        # Add failure notifications here