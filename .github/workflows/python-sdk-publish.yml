name: Python SDK Publish to PyPI

on:
  release:
    types: [published]
    # Only trigger for releases with tags starting with 'python-sdk-v'
  push:
    tags:
      - 'python-sdk-v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.2.0)'
        required: true
        type: string
      environment:
        description: 'Environment to publish to'
        required: true
        default: 'testpypi'
        type: choice
        options:
        - testpypi
        - pypi

env:
  PACKAGE_NAME: claude-code-sdk

defaults:
  run:
    working-directory: python-sdk

jobs:
  version-bump:
    name: Version Bump and Tag
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Update version in pyproject.toml
      id: bump
      run: |
        VERSION="${{ github.event.inputs.version }}"
        echo "Updating version to $VERSION"
        
        # Update pyproject.toml
        sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
        
        # Update setup.py if it exists
        if [ -f setup.py ]; then
          sed -i "s/version=\".*\"/version=\"$VERSION\"/" setup.py
        fi
        
        echo "new_version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml setup.py
        git commit -m "Bump Python SDK version to ${{ steps.bump.outputs.new_version }}" || exit 0
        git push

  pre-publish-checks:
    name: Pre-publish Checks
    runs-on: ubuntu-latest
    needs: [version-bump]
    if: always() && !cancelled()
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip build twine
        pip install -e .[test,dev]
    
    - name: Run full test suite
      run: |
        pytest -xvs --cov=claude_code_sdk --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}/python-sdk
    
    - name: Security scan
      run: |
        pip install bandit safety pip-audit
        bandit -r claude_code_sdk
        safety check
        pip-audit .
    
    - name: Build and check package
      run: |
        python -m build
        twine check dist/*
    
    - name: Test installation
      run: |
        pip install dist/*.whl
        python -c "from claude_code_sdk import ClaudeCodeClient; print('Package installation test passed')"

  publish-testpypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [pre-publish-checks]
    if: |
      always() && 
      !cancelled() && 
      (needs.pre-publish-checks.result == 'success') &&
      (github.event.inputs.environment == 'testpypi' || contains(github.ref, 'refs/tags/'))
    environment:
      name: testpypi
      url: https://test.pypi.org/p/${{ env.PACKAGE_NAME }}
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: python-sdk/dist/
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        skip-existing: true
    
    - name: Verify Test PyPI installation
      run: |
        sleep 60  # Wait for package to be available
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ ${{ env.PACKAGE_NAME }}
        python -c "from claude_code_sdk import ClaudeCodeClient; print('Test PyPI installation verified')"

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [publish-testpypi]
    if: |
      always() && 
      !cancelled() && 
      (needs.publish-testpypi.result == 'success') &&
      (github.event.inputs.environment == 'pypi' || 
       (github.event_name == 'release' && github.event.action == 'published'))
    environment:
      name: pypi
      url: https://pypi.org/p/${{ env.PACKAGE_NAME }}
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: python-sdk/dist/
        password: ${{ secrets.PYPI_API_TOKEN }}
    
    - name: Verify PyPI installation
      run: |
        sleep 60  # Wait for package to be available
        pip install ${{ env.PACKAGE_NAME }}
        python -c "from claude_code_sdk import ClaudeCodeClient; print('PyPI installation verified')"
    
    - name: Create GitHub Release
      if: github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: python-sdk-v${{ needs.version-bump.outputs.new_version || github.event.inputs.version }}
        name: Python SDK v${{ needs.version-bump.outputs.new_version || github.event.inputs.version }}
        body: |
          ## Python SDK Release v${{ needs.version-bump.outputs.new_version || github.event.inputs.version }}
          
          This release includes the Python SDK for Claude Code CLI interactions.
          
          ### Installation
          ```bash
          pip install claude-code-sdk
          ```
          
          ### Changes
          - Automated release from GitHub Actions
          - Full cross-platform testing (Windows, Linux, macOS)
          - Python 3.10+ compatibility
          - Comprehensive security scanning
          - Code coverage analysis
          
          ### Links
          - [PyPI Package](https://pypi.org/project/claude-code-sdk/)
          - [Documentation](https://automatic-claude-code.readthedocs.io/)
        files: |
          python-sdk/dist/*
        draft: false
        prerelease: false

  post-publish:
    name: Post-publish Validation
    runs-on: ubuntu-latest
    needs: [publish-pypi]
    if: always() && needs.publish-pypi.result == 'success'
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
    
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Test installation from PyPI
      run: |
        pip install ${{ env.PACKAGE_NAME }}
        python -c "
        from claude_code_sdk import ClaudeCodeClient, ClaudeCodeOptions
        print('✓ Core imports successful')
        
        try:
            options = ClaudeCodeOptions(model='sonnet')
            print('✓ Options creation successful')
        except Exception as e:
            print(f'⚠ Options creation warning: {e}')
        
        print('✅ PyPI package validation complete for Python ${{ matrix.python-version }}')
        "