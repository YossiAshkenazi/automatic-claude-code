name: Python SDK CI/CD

on:
  push:
    branches: [ main, dashboard-ui-enhancement ]
    paths: 
      - 'python-sdk/**'
      - '.github/workflows/python-sdk-test.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'python-sdk/**'
      - '.github/workflows/python-sdk-test.yml'
  workflow_dispatch:

defaults:
  run:
    working-directory: python-sdk

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install Node.js (for Claude CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Claude CLI
      run: |
        npm install -g @anthropic-ai/claude-code
      shell: bash
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel build
    
    - name: Install package with test dependencies
      run: |
        pip install -e .[test,dev]
    
    - name: Lint with flake8
      run: |
        flake8 claude_code_sdk --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 claude_code_sdk --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      run: |
        black --check claude_code_sdk
    
    - name: Import sort check with isort
      run: |
        isort --check-only claude_code_sdk
    
    - name: Type check with mypy
      run: |
        mypy claude_code_sdk
    
    - name: Run unit tests with pytest
      run: |
        pytest -xvs --cov=claude_code_sdk --cov-report=xml --cov-report=term-missing --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}/python-sdk
    
    - name: Run integration tests
      run: |
        pytest -xvs -m "integration" --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}/python-sdk
        # Note: Integration tests may be skipped if Claude CLI auth isn't available
        CLAUDE_CLI_TEST_SKIP_AUTH: "true"
    
    - name: Upload coverage reports to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: python-sdk/coverage.xml
        flags: python-sdk
        name: python-sdk-coverage
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install security scanning tools
      run: |
        pip install bandit[toml] safety pip-audit
    
    - name: Run bandit security scan
      run: |
        bandit -r claude_code_sdk -f json -o bandit-results.json || true
        bandit -r claude_code_sdk
      working-directory: python-sdk
    
    - name: Run safety check
      run: |
        safety check --json --output safety-results.json || true
        safety check
      working-directory: python-sdk
    
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-results.json . || true
        pip-audit .
      working-directory: python-sdk
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          python-sdk/bandit-results.json
          python-sdk/safety-results.json  
          python-sdk/pip-audit-results.json

  build:
    name: Build Distribution Packages
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine
    
    - name: Build packages
      run: |
        python -m build
      working-directory: python-sdk
    
    - name: Check distribution packages
      run: |
        twine check dist/*
      working-directory: python-sdk
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-sdk-dist
        path: python-sdk/dist/
        retention-days: 7

  compatibility:
    name: Compatibility Testing
    runs-on: ubuntu-latest
    needs: [test]
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Test installation from wheel
      run: |
        python -m pip install --upgrade pip build
        python -m build
        pip install dist/*.whl
        python -c "from claude_code_sdk import ClaudeCodeClient; print('âœ“ Import successful')"
      working-directory: python-sdk
    
    - name: Test CLI entry point
      run: |
        claude-code-sdk --help || echo "CLI entry point test completed"
      working-directory: python-sdk