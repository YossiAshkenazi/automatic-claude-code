name: E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *' # Run nightly at 2 AM

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install pnpm
        run: npm install -g pnpm
        
      - name: Install dependencies
        run: pnpm install
        
      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps ${{ matrix.browser }}
        
      - name: Setup test environment
        run: |
          cp .env.test .env
          docker-compose -f docker-compose.test.yml up -d
          sleep 10
          
      - name: Run database migrations
        run: |
          docker exec countywide-db psql -U postgres -d countywide_test -f /docker-entrypoint-initdb.d/schema.sql
          docker exec countywide-db psql -U postgres -d countywide_test -f /docker-entrypoint-initdb.d/seed.sql
          
      - name: Start application
        run: |
          pnpm run build
          pnpm run preview &
          sleep 5
          
      - name: Run E2E tests
        run: pnpm exec playwright test --project=${{ matrix.browser }}
        env:
          BASE_URL: http://localhost:4173
          CI: true
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 30
          
      - name: Upload test videos
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-videos-${{ matrix.browser }}
          path: test-results/
          retention-days: 7
          
      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down
          
  visual-regression:
    runs-on: ubuntu-latest
    needs: e2e-tests
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm install -g pnpm
          pnpm install
          pnpm exec playwright install chromium
          
      - name: Run visual regression tests
        run: pnpm exec playwright test tests/visual/ --project=chromium
        
      - name: Upload visual diff results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: visual-regression-diff
          path: test-results/
          retention-days: 30
          
  performance-baseline:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm install -g pnpm
          pnpm install
          pnpm exec playwright install chromium
          
      - name: Run performance tests
        run: pnpm exec playwright test tests/performance/ --project=chromium
        
      - name: Save performance metrics
        uses: actions/upload-artifact@v3
        with:
          name: performance-metrics
          path: test-results.json
          retention-days: 90
          
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('test-results.json', 'utf8'));
            
            const comment = `## E2E Test Results
            
            ✅ Tests Passed: ${results.passed}
            ❌ Tests Failed: ${results.failed}
            ⏱️ Duration: ${results.duration}ms
            
            ### Performance Metrics
            - Dashboard Load: ${results.performance.dashboardLoad}ms
            - API Response (avg): ${results.performance.apiAverage}ms
            - Search Response: ${results.performance.searchTime}ms
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });