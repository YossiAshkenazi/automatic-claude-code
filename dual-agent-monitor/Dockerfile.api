# Multi-stage Dockerfile for dual-agent monitoring API server
# Stage 1: Build stage
FROM node:18-alpine as builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY pnpm-lock.yaml ./

# Install pnpm and dependencies
RUN npm install -g pnpm
RUN pnpm install --frozen-lockfile

# Copy TypeScript configuration
COPY tsconfig.json ./
COPY server/tsconfig.json ./server/
COPY server/tsconfig.minimal.json ./server/

# Copy server source code (minimal version for production)
COPY server/websocket-server-minimal.ts ./server/
COPY server/database/ ./server/database/
COPY server/types.ts ./server/

# Build the minimal server
RUN npx tsc server/websocket-server-minimal.ts --outDir dist --target es2020 --module commonjs --moduleResolution node --esModuleInterop --allowSyntheticDefaultImports --resolveJsonModule --skipLibCheck

# Stage 2: Production stage
FROM node:18-alpine as production

# Install security updates
RUN apk update && apk upgrade

# Create app user for security
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY pnpm-lock.yaml ./

# Install pnpm and production dependencies only
RUN npm install -g pnpm
RUN pnpm install --prod --frozen-lockfile

# Copy built server from builder stage
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist

# Copy database schema and seed files
COPY --chown=nodejs:nodejs server/database/*.sql ./server/database/

# Create logs directory
RUN mkdir -p /app/logs && chown nodejs:nodejs /app/logs

# Switch to non-root user
USER nodejs

# Expose API server port
EXPOSE 4005

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD node -e "const http = require('http'); \
    const options = { hostname: 'localhost', port: 4005, path: '/api/health', timeout: 5000 }; \
    const req = http.request(options, (res) => { \
      if (res.statusCode === 200) process.exit(0); else process.exit(1); \
    }); \
    req.on('error', () => process.exit(1)); \
    req.end();"

# Set environment variables
ENV NODE_ENV=production
ENV WEBSOCKET_SERVER_PORT=4005

# Start the API server
CMD ["node", "dist/websocket-server-minimal.js"]