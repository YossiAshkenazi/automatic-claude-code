# HAProxy Configuration for High Availability Dual Agent Monitor
# Load balancing, health checks, and failover

global
    log stdout local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # SSL/TLS Configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor
    option http-server-close
    option redispatch
    retries 3
    timeout connect 5000
    timeout client 50000
    timeout server 50000
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Stats interface
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if TRUE
    stats auth admin:haproxy-stats-password

# Frontend for HTTP (redirect to HTTPS)
frontend http_frontend
    bind *:80
    
    # Redirect HTTP to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }

# Frontend for HTTPS
frontend https_frontend
    bind *:443 ssl crt /etc/ssl/certs/
    
    # Security headers
    http-response set-header Strict-Transport-Security max-age=31536000;\ includeSubDomains;\ preload
    http-response set-header X-Frame-Options SAMEORIGIN
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection 1;\ mode=block
    http-response set-header Referrer-Policy strict-origin-when-cross-origin
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request reject if { sc_http_req_rate(0) gt 20 }
    
    # ACME challenge for Let's Encrypt
    acl letsencrypt-acl path_beg /.well-known/acme-challenge/
    use_backend letsencrypt-backend if letsencrypt-acl
    
    # API endpoints
    acl is_api path_beg /api/
    use_backend api_backend if is_api
    
    # WebSocket endpoints
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_websocket_path path_beg /ws/
    use_backend websocket_backend if is_websocket OR is_websocket_path
    
    # Monitoring endpoints
    acl is_monitoring path_beg /metrics /health /prometheus /grafana
    use_backend monitoring_backend if is_monitoring
    
    # Default backend for web application
    default_backend web_backend

# Backend for main web application
backend web_backend
    balance roundrobin
    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200
    
    # Application servers
    server app1 dual-agent-monitor-1:8080 check inter 5s rise 2 fall 3 weight 100
    server app2 dual-agent-monitor-2:8080 check inter 5s rise 2 fall 3 weight 100
    
    # Backup server (optional)
    # server backup-app backup-server:8080 check inter 10s rise 2 fall 5 backup

# Backend for API requests
backend api_backend
    balance leastconn
    option httpchk GET /api/health HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200
    
    # Sticky sessions for API
    cookie SERVERID insert indirect nocache
    
    server api1 dual-agent-monitor-1:8080 check cookie s1 inter 5s rise 2 fall 3
    server api2 dual-agent-monitor-2:8080 check cookie s2 inter 5s rise 2 fall 3

# Backend for WebSocket connections
backend websocket_backend
    balance source
    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200
    
    # WebSocket specific settings
    timeout tunnel 3600s
    timeout server 3600s
    
    server ws1 dual-agent-monitor-1:8080 check inter 10s rise 2 fall 3
    server ws2 dual-agent-monitor-2:8080 check inter 10s rise 2 fall 3

# Backend for monitoring endpoints
backend monitoring_backend
    balance roundrobin
    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200
    
    # Monitoring servers
    server monitor1 dual-agent-monitor-1:8080 check inter 10s
    server monitor2 dual-agent-monitor-2:8080 check inter 10s
    
    # Direct monitoring services
    server prometheus prometheus-ha:9090 check inter 30s
    server grafana grafana-ha:3000 check inter 30s

# Backend for Let's Encrypt ACME challenge
backend letsencrypt-backend
    server letsencrypt 127.0.0.1:8080

# Database load balancer (read/write splitting)
listen postgres_frontend
    bind *:5432
    mode tcp
    balance leastconn
    
    # Write operations go to primary
    server postgres-primary postgres-primary:5432 check port 5432 inter 5s rise 2 fall 3
    # Read operations can go to secondary (configure in application)
    # server postgres-secondary postgres-secondary:5432 check port 5432 inter 5s rise 2 fall 3 backup

# Redis Sentinel frontend
listen redis_frontend
    bind *:6379
    mode tcp
    balance first
    
    server redis-sentinel-1 redis-sentinel-1:26379 check inter 5s
    server redis-sentinel-2 redis-sentinel-2:26379 check inter 5s backup
    server redis-sentinel-3 redis-sentinel-3:26379 check inter 5s backup

# Error pages
errorfile 503 /usr/local/etc/haproxy/errors/503.http

# Logging configuration
log-tag haproxy-dual-agent-monitor

# Health check endpoints for external load balancers
frontend health_check
    bind *:8080
    monitor-uri /haproxy-health
    monitor fail unless { nbsrv(web_backend) gt 0 }
    monitor fail unless { nbsrv(api_backend) gt 0 }