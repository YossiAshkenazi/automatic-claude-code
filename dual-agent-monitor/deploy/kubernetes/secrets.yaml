# Kubernetes Secrets Template
# IMPORTANT: Replace all placeholder values before deploying
# Consider using external secret management like Sealed Secrets or External Secrets Operator

apiVersion: v1
kind: Secret
metadata:
  name: dual-agent-monitor-secrets
  namespace: dual-agent-monitor
type: Opaque
stringData:
  # Database credentials
  POSTGRES_PASSWORD: "REPLACE_WITH_SECURE_PASSWORD"
  DATABASE_URL: "postgresql://postgres:REPLACE_WITH_SECURE_PASSWORD@postgres-service:5432/dual_agent_monitor"
  
  # Redis credentials
  REDIS_PASSWORD: "REPLACE_WITH_SECURE_REDIS_PASSWORD"
  REDIS_URL: "redis://:REPLACE_WITH_SECURE_REDIS_PASSWORD@redis-service:6379"
  
  # Application secrets
  JWT_SECRET: "REPLACE_WITH_32_CHAR_JWT_SECRET_KEY"
  SESSION_SECRET: "REPLACE_WITH_32_CHAR_SESSION_SECRET"
  CSRF_SECRET: "REPLACE_WITH_32_CHAR_CSRF_SECRET"
  
  # External service credentials
  SLACK_WEBHOOK_URL: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
  SMTP_PASS: "REPLACE_WITH_SMTP_PASSWORD"
  
  # Cloud storage credentials
  AWS_ACCESS_KEY_ID: "REPLACE_WITH_AWS_ACCESS_KEY"
  AWS_SECRET_ACCESS_KEY: "REPLACE_WITH_AWS_SECRET_KEY"

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
  namespace: dual-agent-monitor
type: Opaque
stringData:
  POSTGRES_DB: "dual_agent_monitor"
  POSTGRES_USER: "postgres"
  POSTGRES_PASSWORD: "REPLACE_WITH_SECURE_PASSWORD"

---
# TLS Certificate Secret (replace with actual cert data or use cert-manager)
apiVersion: v1
kind: Secret
metadata:
  name: tls-certificate
  namespace: dual-agent-monitor
type: kubernetes.io/tls
data:
  # Base64 encoded certificate and key
  # Use: kubectl create secret tls tls-certificate --cert=fullchain.pem --key=privkey.pem -n dual-agent-monitor
  tls.crt: LS0tLS1CRUdJTi... # REPLACE_WITH_BASE64_ENCODED_CERTIFICATE
  tls.key: LS0tLS1CRUdJTi... # REPLACE_WITH_BASE64_ENCODED_PRIVATE_KEY