# Full Stack Dual-Agent Monitoring System
# Complete deployment with frontend, API server, database, and all supporting services
services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    container_name: dual-agent-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-dual_agent_monitor}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-dual_agent_secure_pass_2025}
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_EXTERNAL_PORT:-5434}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/database/schema-postgres.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./server/database/seed-postgres.sql:/docker-entrypoint-initdb.d/02-seed.sql:ro
      - ./backups:/backups
    networks:
      - dual-agent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-dual_agent_monitor}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: dual-agent-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-dual_agent_redis_pass_2025} --maxmemory 128mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_EXTERNAL_PORT:-6380}:6379"
    volumes:
      - redis_data:/data
    networks:
      - dual-agent-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # API Server Service
  api-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: dual-agent-api
    restart: unless-stopped
    environment:
      # Database Configuration
      - DB_TYPE=postgresql
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-dual_agent_monitor}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-dual_agent_secure_pass_2025}
      - POSTGRES_MAX_CONNECTIONS=${POSTGRES_MAX_CONNECTIONS:-20}
      - POSTGRES_SSL=false
      
      # Application Configuration
      - NODE_ENV=production
      - WEBSOCKET_SERVER_PORT=4005
      - API_BASE_URL=http://api-server:4005/api
      
      # Security Configuration
      - JWT_SECRET=${JWT_SECRET:-dual-agent-jwt-secret-key-minimum-32-chars-2025}
      - SESSION_SECRET=${SESSION_SECRET:-dual-agent-session-secret-key-minimum-32-chars-2025}
      
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-dual_agent_redis_pass_2025}
      
      # Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      
      # Performance Configuration
      - MAX_REQUEST_SIZE=${MAX_REQUEST_SIZE:-10mb}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-900000}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-100}
    ports:
      - "${WEBSOCKET_SERVER_PORT:-4005}:4005"
    volumes:
      - api_logs:/app/logs
      - ./backups:/app/backups:ro
    networks:
      - dual-agent-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4005/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: dual-agent-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - VITE_WS_URL=ws://localhost:6011/ws
      - VITE_API_BASE_URL=http://localhost:6011/api
    networks:
      - dual-agent-network
    depends_on:
      api-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: dual-agent-nginx
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-6011}:80"
    volumes:
      - ./nginx-unified.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    networks:
      - dual-agent-network
    depends_on:
      frontend:
        condition: service_healthy
      api-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 32M

  # pgAdmin4 - Database Administration (Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: dual-agent-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@dual-agent-monitor.local}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin123}
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "${PGADMIN_PORT:-8082}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - dual-agent-network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - admin
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Health Check Service
  healthcheck:
    image: curlimages/curl:latest
    container_name: dual-agent-healthcheck
    restart: "no"
    networks:
      - dual-agent-network
    depends_on:
      nginx:
        condition: service_healthy
      api-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
    command: |
      sh -c "
        echo 'Running comprehensive health checks...'
        
        echo 'Testing frontend access...'
        curl -f http://nginx/ || exit 1
        
        echo 'Testing API health endpoint...'
        curl -f http://api-server:4005/api/health || exit 1
        
        echo 'Testing WebSocket endpoint...'
        curl -f http://api-server:4005/ws || echo 'WebSocket upgrade expected'
        
        echo 'Testing database connectivity...'
        nc -z postgres 5432 || exit 1
        
        echo 'Testing Redis connectivity...'
        nc -z redis 6379 || exit 1
        
        echo 'All health checks passed!'
        exit 0
      "
    profiles:
      - test

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/postgres
  redis_data:
    driver: local
  api_logs:
    driver: local
  nginx_logs:
    driver: local
  pgadmin_data:
    driver: local

networks:
  dual-agent-network:
    driver: bridge
    name: ${NETWORK_NAME:-dual-agent-network}
    ipam:
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1
    driver_opts:
      com.docker.network.bridge.name: "dual-agent-br"
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: "1500"