version: '3.8'

services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    container_name: ${POSTGRES_CONTAINER_NAME:-dual-agent-postgres}
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-dual_agent_monitor}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-dual_agent_secure_pass_2025}
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5434}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/database/schema-postgres.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./backups:/backups
    networks:
      - dual-agent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-dual_agent_monitor}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Redis Cache Service (Optional but recommended for session storage)
  redis:
    image: redis:7-alpine
    container_name: ${REDIS_CONTAINER_NAME:-dual-agent-redis}
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-dual_agent_redis_pass_2025} --maxmemory 128mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - dual-agent-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # pgAdmin4 - PostgreSQL Administration Tool (Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: dual-agent-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@dual-agent-monitor.local}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin123}
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "8082:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - dual-agent-network
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Database Backup Service
  postgres-backup:
    image: postgres:15-alpine
    container_name: dual-agent-postgres-backup
    restart: "no"
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD:-dual_agent_secure_pass_2025}
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts:ro
    networks:
      - dual-agent-network
    depends_on:
      postgres:
        condition: service_healthy
    command: |
      sh -c "
        echo 'Database backup service ready. Run manual backups with:'
        echo 'docker exec dual-agent-postgres-backup pg_dump -h postgres -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-dual_agent_monitor} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql'
        tail -f /dev/null
      "
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/postgres
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  dual-agent-network:
    driver: bridge
    name: ${NETWORK_NAME:-dual-agent-network}
    ipam:
      config:
        - subnet: 172.21.0.0/16