import React, { useEffect, useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';
import { 
  Wifi, 
  WifiOff, 
  Activity, 
  Clock, 
  AlertTriangle, 
  CheckCircle,
  RefreshCw,
  TrendingUp,
  TrendingDown,
  Zap
} from 'lucide-react';
import { ConnectionQualityMetrics, getGlobalConnectionMonitor } from '@/utils/connectionMonitor';

interface ConnectionHealthDashboardProps {
  isConnected: boolean;
  isReconnecting: boolean;
  connectionStatus: string;
  connectionHealth: any;
  connectionReliability: number;
  isUsingFallback: boolean;
  onReconnect: () => void;
}

interface QualityIndicatorProps {
  quality: 'excellent' | 'good' | 'fair' | 'poor' | 'critical';
  metrics: ConnectionQualityMetrics;
}

const QualityIndicator: React.FC<QualityIndicatorProps> = ({ quality, metrics }) => {
  const getQualityColor = (quality: string) => {
    switch (quality) {
      case 'excellent': return 'text-green-600 bg-green-100';
      case 'good': return 'text-blue-600 bg-blue-100';
      case 'fair': return 'text-yellow-600 bg-yellow-100';
      case 'poor': return 'text-orange-600 bg-orange-100';
      case 'critical': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }\n  };\n\n  const getQualityIcon = (quality: string) => {\n    switch (quality) {\n      case 'excellent': return <CheckCircle className=\"h-4 w-4\" />;\n      case 'good': return <CheckCircle className=\"h-4 w-4\" />;\n      case 'fair': return <Activity className=\"h-4 w-4\" />;\n      case 'poor': return <AlertTriangle className=\"h-4 w-4\" />;\n      case 'critical': return <AlertTriangle className=\"h-4 w-4\" />;\n      default: return <Activity className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <Badge className={`${getQualityColor(quality)} flex items-center space-x-1`}>\n        {getQualityIcon(quality)}\n        <span className=\"capitalize\">{quality}</span>\n      </Badge>\n      <span className=\"text-sm text-gray-600\">\n        {metrics.latency}ms â€¢ {metrics.reliability}% reliable\n      </span>\n    </div>\n  );\n};\n\nconst ConnectionHealthDashboard: React.FC<ConnectionHealthDashboardProps> = ({\n  isConnected,\n  isReconnecting,\n  connectionStatus,\n  connectionHealth,\n  connectionReliability,\n  isUsingFallback,\n  onReconnect\n}) => {\n  const [qualityMetrics, setQualityMetrics] = useState<ConnectionQualityMetrics>({\n    latency: 0,\n    jitter: 0,\n    packetLoss: 0,\n    reliability: 100,\n    uptime: 0,\n    reconnectCount: 0\n  });\n  const [quality, setQuality] = useState<'excellent' | 'good' | 'fair' | 'poor' | 'critical'>('excellent');\n  const [recommendations, setRecommendations] = useState<string[]>([]);\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  useEffect(() => {\n    const monitor = getGlobalConnectionMonitor();\n    \n    const updateMetrics = () => {\n      const metrics = monitor.getMetrics();\n      const currentQuality = monitor.getQuality();\n      const currentRecommendations = monitor.getRecommendations();\n      \n      setQualityMetrics(metrics);\n      setQuality(currentQuality);\n      setRecommendations(currentRecommendations);\n    };\n\n    // Update metrics immediately\n    updateMetrics();\n\n    // Update metrics every 5 seconds\n    const interval = setInterval(updateMetrics, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const getStatusIcon = () => {\n    if (isReconnecting) return <RefreshCw className=\"h-5 w-5 animate-spin text-yellow-600\" />;\n    if (isUsingFallback) return <WifiOff className=\"h-5 w-5 text-orange-600\" />;\n    if (isConnected) return <Wifi className=\"h-5 w-5 text-green-600\" />;\n    return <WifiOff className=\"h-5 w-5 text-red-600\" />;\n  };\n\n  const getStatusText = () => {\n    if (isReconnecting) return 'Reconnecting...';\n    if (isUsingFallback) return 'Using Fallback';\n    if (isConnected) return 'Connected';\n    return 'Disconnected';\n  };\n\n  const formatUptime = (uptime: number) => {\n    const seconds = Math.floor(uptime / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    \n    if (hours > 0) return `${hours}h ${minutes % 60}m`;\n    if (minutes > 0) return `${minutes}m ${seconds % 60}s`;\n    return `${seconds}s`;\n  };\n\n  const shouldShowAlert = quality === 'critical' || quality === 'poor' || connectionReliability < 95;\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Main Connection Status */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              {getStatusIcon()}\n              <div>\n                <CardTitle className=\"text-lg\">{getStatusText()}</CardTitle>\n                <QualityIndicator quality={quality} metrics={qualityMetrics} />\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={() => setIsExpanded(!isExpanded)}\n              >\n                {isExpanded ? 'Hide Details' : 'Show Details'}\n              </Button>\n              {(!isConnected || shouldShowAlert) && (\n                <Button \n                  variant=\"default\" \n                  size=\"sm\" \n                  onClick={onReconnect}\n                  className=\"flex items-center space-x-1\"\n                >\n                  <RefreshCw className=\"h-3 w-3\" />\n                  <span>Reconnect</span>\n                </Button>\n              )}\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          {/* Connection Reliability Progress */}\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span>Connection Reliability</span>\n              <span className=\"font-medium\">{connectionReliability.toFixed(1)}%</span>\n            </div>\n            <Progress \n              value={connectionReliability} \n              className=\"h-2\"\n              // @ts-ignore - Progress component may not have color props\n              color={connectionReliability >= 95 ? 'green' : connectionReliability >= 85 ? 'yellow' : 'red'}\n            />\n          </div>\n\n          {isUsingFallback && (\n            <Alert className=\"mt-3\">\n              <Zap className=\"h-4 w-4\" />\n              <AlertDescription>\n                Using HTTP polling fallback due to WebSocket issues. \n                Some real-time features may be limited.\n              </AlertDescription>\n            </Alert>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Detailed Metrics (Expandable) */}\n      {isExpanded && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {/* Latency Metrics */}\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm flex items-center space-x-2\">\n                <Clock className=\"h-4 w-4\" />\n                <span>Latency</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Average</span>\n                  <span className=\"font-medium\">{qualityMetrics.latency.toFixed(1)}ms</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Jitter</span>\n                  <span className=\"font-medium\">{qualityMetrics.jitter.toFixed(1)}ms</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Connection Stats */}\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm flex items-center space-x-2\">\n                <Activity className=\"h-4 w-4\" />\n                <span>Connection Stats</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Uptime</span>\n                  <span className=\"font-medium\">{formatUptime(qualityMetrics.uptime)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Reconnects</span>\n                  <span className=\"font-medium\">{qualityMetrics.reconnectCount}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Packet Loss</span>\n                  <span className=\"font-medium\">{qualityMetrics.packetLoss.toFixed(1)}%</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Health Metrics */}\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm flex items-center space-x-2\">\n                <TrendingUp className=\"h-4 w-4\" />\n                <span>Health Metrics</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {connectionHealth && (\n                  <>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">Success Rate</span>\n                      <span className=\"font-medium\">\n                        {connectionHealth.successfulConnections > 0 ? \n                          ((connectionHealth.successfulConnections / connectionHealth.connectionAttempts) * 100).toFixed(1) : \n                          '0.0'}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">Total Attempts</span>\n                      <span className=\"font-medium\">{connectionHealth.connectionAttempts || 0}</span>\n                    </div>\n                  </>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Recommendations */}\n      {recommendations.length > 0 && (\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm flex items-center space-x-2\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <span>Recommendations</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-1\">\n              {recommendations.map((recommendation, index) => (\n                <li key={index} className=\"text-sm text-gray-600 flex items-start space-x-2\">\n                  <span className=\"text-blue-500 mt-1\">â€¢</span>\n                  <span>{recommendation}</span>\n                </li>\n              ))}\n            </ul>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Critical Connection Alert */}\n      {shouldShowAlert && (\n        <Alert variant=\"destructive\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription className=\"flex items-center justify-between\">\n            <span>\n              Connection quality is {quality === 'critical' ? 'critical' : 'degraded'}. \n              {connectionReliability < 95 ? ' Reliability below threshold.' : ''}\n            </span>\n            <Button variant=\"outline\" size=\"sm\" onClick={onReconnect} className=\"ml-2\">\n              <RefreshCw className=\"h-3 w-3 mr-1\" />\n              Reconnect\n            </Button>\n          </AlertDescription>\n        </Alert>\n      )}\n    </div>\n  );\n};\n\nexport default ConnectionHealthDashboard;"}