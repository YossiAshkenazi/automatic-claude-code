[build-system]
requires = [
    "setuptools>=61.0",
    "wheel",
    "build"
]
build-backend = "setuptools.build_meta"

[project]
name = "claude-code-sdk"
version = "0.1.0"
description = "Official Python SDK for Claude Code CLI with dual-agent support"
readme = "README.md"
license = "MIT"
authors = [
    {name = "Claude Code SDK Team", email = "sdk@example.com"},
]
maintainers = [
    {name = "Claude Code SDK Team", email = "sdk@example.com"},
]
keywords = [
    "claude", 
    "anthropic", 
    "ai", 
    "cli", 
    "sdk", 
    "dual-agent", 
    "automation",
    "streaming"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]
requires-python = ">=3.10"
dependencies = [
    # No external dependencies - uses only stdlib for maximum compatibility
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "black>=22.0.0",
    "isort>=5.0.0",
    "mypy>=1.0.0",
    "flake8>=6.0.0",
    "pre-commit>=3.0.0",
    "coverage[toml]>=7.0.0",
    "pytest-cov>=4.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "coverage[toml]>=7.0.0",
    "pytest-cov>=4.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-autodoc-typehints>=1.19.0",
    "myst-parser>=0.18.0",
]
all = [
    "claude-code-sdk[dev,test,docs]"
]

[project.urls]
Homepage = "https://github.com/yossiashkenazi/automatic-claude-code"
Documentation = "https://automatic-claude-code.readthedocs.io/"
Repository = "https://github.com/yossiashkenazi/automatic-claude-code.git"
"Bug Tracker" = "https://github.com/yossiashkenazi/automatic-claude-code/issues"
Changelog = "https://github.com/yossiashkenazi/automatic-claude-code/blob/main/CHANGELOG.md"

[project.scripts]
claude-code-sdk = "claude_code_sdk.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["claude_code_sdk*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
claude_code_sdk = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["claude_code_sdk"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=claude_code_sdk",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["claude_code_sdk"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]